(()=>{var e={4153:e=>{e.exports=function(e){return void 0!==typeof e&&!0===e?"active":""}},336:e=>{e.exports=function(e){return"object"==typeof e&&0!==e.length}},7949:e=>{e.exports=function(e){return"string"==typeof e&&""!==e&&null!==e}},8987:e=>{e.exports=function(e){let t,n;return t=220,n=200,"string"==typeof e&&e.length>220?e.substring(0,200)+"...":e}},5585:(e,t,n)=>{var a=n(202);function r(e){return e&&(e.__esModule?e.default:e)}e.exports=(a.default||a).template({1:function(e,t,a,l,i){var o,s=null!=t?t:e.nullContext||{},u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(o=u(a,"if").call(s,r(n(336)).call(s,null!=t?u(t,"dropdown"):t,{name:"$not_empty_array",hash:{},data:i,loc:{start:{line:4,column:10},end:{line:4,column:37}}}),{name:"if",hash:{},fn:e.program(2,i,0),inverse:e.program(5,i,0),data:i,loc:{start:{line:4,column:4},end:{line:24,column:11}}}))?o:"")+"\r\n"},2:function(e,t,n,a,r){var l,i=e.lambda,o=e.escapeExpression,s=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n        <div class="ui simple dropdown item px-2">\r\n            <a href="'+o(i(null!=t?s(t,"url"):t,t))+'" class="item p-0 text-uppercase"> '+o(i(null!=t?s(t,"label"):t,t))+' </a>\r\n            <i class="dropdown icon"></i>\r\n            <div class="menu htsa-dropdown-menu htsa-bg-dark">\r\n\r\n'+(null!=(l=s(n,"each").call(null!=t?t:e.nullContext||{},null!=t?s(t,"dropdown"):t,{name:"each",hash:{},fn:e.program(3,r,0),inverse:e.noop,data:r,loc:{start:{line:11,column:16},end:{line:15,column:25}}}))?l:"")+"\r\n            </div>\r\n        </div>\r\n\r\n"},3:function(e,t,n,a,r){var l=e.lambda,i=e.escapeExpression,o=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n                    <a href="'+i(l(null!=t?o(t,"url"):t,t))+'" class="item"> '+i(l(null!=t?o(t,"label"):t,t))+" </a>\r\n\r\n"},5:function(e,t,a,l,i){var o=e.lambda,s=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n        <a href="'+s(o(null!=t?u(t,"url"):t,t))+'" class="'+s(r(n(4153)).call(null!=t?t:e.nullContext||{},null!=t?u(t,"active"):t,{name:"$activeMenuLink",hash:{},data:i,loc:{start:{line:22,column:33},end:{line:22,column:60}}}))+' item px-2 text-uppercase"> '+s(o(null!=t?u(t,"label"):t,t))+" </a>\r\n\r\n"},compiler:[8,">= 4.3.0"],main:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"pc"):t,{name:"each",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r,loc:{start:{line:2,column:0},end:{line:26,column:9}}}))?l:"")},useData:!0})},145:(e,t,n)=>{var a=n(202);e.exports=(a.default||a).template({1:function(e,t,n,a,r){var l,i=null!=t?t:e.nullContext||{},o=e.hooks.helperMissing,s="function",u=e.escapeExpression,c=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <li class="nav-item">\r\n        <a href="'+u(typeof(l=null!=(l=c(n,"url")||(null!=t?c(t,"url"):t))?l:o)===s?l.call(i,{name:"url",hash:{},data:r,loc:{start:{line:5,column:17},end:{line:5,column:24}}}):l)+'" class="nav-link text-capitalize link-dark"> '+u(typeof(l=null!=(l=c(n,"title")||(null!=t?c(t,"title"):t))?l:o)===s?l.call(i,{name:"title",hash:{},data:r,loc:{start:{line:5,column:70},end:{line:5,column:79}}}):l)+' </a>\r\n        <small class="text-muted fst-italic"> - '+u(typeof(l=null!=(l=c(n,"date")||(null!=t?c(t,"date"):t))?l:o)===s?l.call(i,{name:"date",hash:{},data:r,loc:{start:{line:6,column:48},end:{line:6,column:56}}}):l)+" </small>\r\n    </li>\r\n\r\n"},compiler:[8,">= 4.3.0"],main:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"all"):t,{name:"each",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r,loc:{start:{line:2,column:0},end:{line:9,column:9}}}))?l:"")},useData:!0})},4210:(e,t,n)=>{var a=n(202);e.exports=(a.default||a).template({1:function(e,t,n,a,r){var l,i=null!=t?t:e.nullContext||{},o=e.hooks.helperMissing,s="function",u=e.escapeExpression,c=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <li class="nav-item"><a href="'+u(typeof(l=null!=(l=c(n,"url")||(null!=t?c(t,"url"):t))?l:o)===s?l.call(i,{name:"url",hash:{},data:r,loc:{start:{line:4,column:34},end:{line:4,column:41}}}):l)+'" class="nav-link text-capitalize p-0"><i class="caret right icon text-dark"></i> '+u(typeof(l=null!=(l=c(n,"title")||(null!=t?c(t,"title"):t))?l:o)===s?l.call(i,{name:"title",hash:{},data:r,loc:{start:{line:4,column:123},end:{line:4,column:132}}}):l)+" </a></li>\r\n\r\n"},compiler:[8,">= 4.3.0"],main:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"trending"):t,{name:"each",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r,loc:{start:{line:2,column:0},end:{line:6,column:9}}}))?l:"")},useData:!0})},7597:(e,t,n)=>{var a=n(202);e.exports=(a.default||a).template({1:function(e,t,n,a,r){var l,i=null!=t?t:e.nullContext||{},o=e.hooks.helperMissing,s="function",u=e.escapeExpression,c=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <li class="nav-item"><a href="'+u(typeof(l=null!=(l=c(n,"url")||(null!=t?c(t,"url"):t))?l:o)===s?l.call(i,{name:"url",hash:{},data:r,loc:{start:{line:4,column:34},end:{line:4,column:41}}}):l)+'" class="nav-link"> '+u(typeof(l=null!=(l=c(n,"label")||(null!=t?c(t,"label"):t))?l:o)===s?l.call(i,{name:"label",hash:{},data:r,loc:{start:{line:4,column:61},end:{line:4,column:70}}}):l)+" </a></li>\r\n\r\n"},compiler:[8,">= 4.3.0"],main:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"footer"):t,{name:"each",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r,loc:{start:{line:2,column:0},end:{line:6,column:9}}}))?l:"")},useData:!0})},7639:(e,t,n)=>{var a=n(202);e.exports=(a.default||a).template({1:function(e,t,a,r,l){var i,o=e.lambda,s=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <div>\r\n        <div class="ui fluid card rounded-0">\r\n            <div class="htsa-background-image htsa-background-image-scroll" style="background-image: url(\''+s(o(null!=t?u(t,"thumbnail"):t,t))+'\');"></div>\r\n            <div class="content">\r\n                <h1 class="text-capitalize fw-bolder htsa-ff-roboto-slab mb-3"> '+s(o(null!=t?u(t,"title"):t,t))+' </h1>\r\n                <p class="mb-3"> '+s((i=n(8987),i&&(i.__esModule?i.default:i)).call(null!=t?t:e.nullContext||{},null!=t?u(t,"content"):t,{name:"$stringExcerpt",hash:{},data:l,loc:{start:{line:9,column:33},end:{line:9,column:59}}}))+' </p>\r\n                <a href="'+s(o(null!=t?u(t,"url"):t,t))+'" class="ui yellow right labeled icon button text-dark text-capitalize rounded-0">read article <i class="long arrow alternate right icon"></i> </a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n'},compiler:[8,">= 4.3.0"],main:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"featured"):t,{name:"each",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r,loc:{start:{line:2,column:0},end:{line:15,column:9}}}))?l:"")},useData:!0})},6550:(e,t,n)=>{var a=n(202);function r(e){return e&&(e.__esModule?e.default:e)}e.exports=(a.default||a).template({1:function(e,t,a,l,i){var o,s=e.lambda,u=e.escapeExpression,c=null!=t?t:e.nullContext||{},d=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <div>\r\n        <div class="ui fluid card rounded-0">\r\n\r\n            <a href="'+u(s(null!=t?d(t,"url"):t,t))+'" class="image overflow-hidden">\r\n\r\n'+(null!=(o=d(a,"if").call(c,r(n(7949)).call(c,null!=t?d(t,"thumbnail"):t,{name:"$not_empty",hash:{},data:i,loc:{start:{line:9,column:22},end:{line:9,column:44}}}),{name:"if",hash:{},fn:e.program(2,i,0),inverse:e.program(4,i,0),data:i,loc:{start:{line:9,column:16},end:{line:17,column:23}}}))?o:"")+'\r\n            </a>\r\n\r\n            <div class="content">\r\n                <h1 class="fs-5 fw-semibold text-capitalize border-bottom pb-2">\r\n                    <a href="'+u(s(null!=t?d(t,"url"):t,t))+'" class="link-dark htsa-link-transition htsa-text-hover-primary"> '+u(s(null!=t?d(t,"title"):t,t))+" </a>\r\n                </h1>\r\n                <p> "+u(r(n(8987)).call(c,null!=t?d(t,"content"):t,{name:"$stringExcerpt",hash:{},data:i,loc:{start:{line:25,column:20},end:{line:25,column:46}}}))+" </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n"},2:function(e,t,n,a,r){var l=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n                    <img src="'+e.escapeExpression(e.lambda(null!=t?l(t,"thumbnail"):t,t))+'" alt="" />\r\n\r\n'},4:function(e,t,n,a,r){return'\r\n                    <img src="./assets/images/image.png" alt="" />\r\n\r\n'},compiler:[8,">= 4.3.0"],main:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"all"):t,{name:"each",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r,loc:{start:{line:2,column:0},end:{line:30,column:9}}}))?l:"")},useData:!0})},1739:(e,t,n)=>{var a=n(202);e.exports=(a.default||a).template({1:function(e,t,a,r,l){var i,o,s=null!=t?t:e.nullContext||{},u=e.lambda,c=e.escapeExpression,d=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <div>\r\n        <div class="ui raised card rounded-0 mb-5 mx-auto">\r\n            <div class="center aligned content">\r\n\r\n'+(null!=(i=d(a,"if").call(s,(o=n(7949),o&&(o.__esModule?o.default:o)).call(s,null!=t?d(t,"image_url"):t,{name:"$not_empty",hash:{},data:l,loc:{start:{line:8,column:22},end:{line:8,column:44}}}),{name:"if",hash:{},fn:e.program(2,l,0),inverse:e.noop,data:l,loc:{start:{line:8,column:16},end:{line:12,column:23}}}))?i:"")+'\r\n                <div class="ui dividing header fw-normal text-capitalize htsa-ff-roboto mb-3"> '+c(u(null!=t?d(t,"title"):t,t))+' </div>\r\n                <div class="description fw-normal mb-4"> '+c(u(null!=t?d(t,"description"):t,t))+' </div>\r\n            </div>\r\n            <a href="'+c(u(null!=t?d(t,"action_url"):t,t))+'" class="ui bottom attached black button htsa-text-yellow text-capitalize">\r\n                '+c(u(null!=t?d(t,"action_text"):t,t))+' <i class="right angle icon"></i>\r\n            </a>\r\n        </div>\r\n    </div>\r\n\r\n'},2:function(e,t,n,a,r){var l=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n                    <img src="'+e.escapeExpression(e.lambda(null!=t?l(t,"image_url"):t,t))+'" alt="" class="ui tiny image" />\r\n\r\n'},compiler:[8,">= 4.3.0"],main:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"frontpage"):t,{name:"each",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r,loc:{start:{line:2,column:0},end:{line:23,column:9}}}))?l:"")},useData:!0})},9793:(e,t,n)=>{var a=n(202);e.exports=(a.default||a).template({1:function(e,t,n,a,r){var l,i=null!=t?t:e.nullContext||{},o=e.hooks.helperMissing,s="function",u=e.escapeExpression,c=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <div>\r\n        <div class="text-center">\r\n            <div data-htsa-id="statisticsValue"> '+u(typeof(l=null!=(l=c(n,"value")||(null!=t?c(t,"value"):t))?l:o)===s?l.call(i,{name:"value",hash:{},data:r,loc:{start:{line:6,column:49},end:{line:6,column:58}}}):l)+' </div>\r\n            <div data-htsa-id="statisticsLabel"> '+u(typeof(l=null!=(l=c(n,"label")||(null!=t?c(t,"label"):t))?l:o)===s?l.call(i,{name:"label",hash:{},data:r,loc:{start:{line:7,column:49},end:{line:7,column:58}}}):l)+" </div>\r\n        </div>\r\n    </div>\r\n\r\n"},compiler:[8,">= 4.3.0"],main:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"frontpage"):t,{name:"each",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r,loc:{start:{line:2,column:0},end:{line:11,column:9}}}))?l:"")},useData:!0})},8316:(e,t,n)=>{var a=n(202);e.exports=(a.default||a).template({1:function(e,t,n,a,r){var l,i=null!=t?t:e.nullContext||{},o=e.hooks.helperMissing,s="function",u=e.escapeExpression,c=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <li class="nav-item hstack"> <i class="hand point right icon"></i> <a href="'+u(typeof(l=null!=(l=c(n,"url")||(null!=t?c(t,"url"):t))?l:o)===s?l.call(i,{name:"url",hash:{},data:r,loc:{start:{line:4,column:80},end:{line:4,column:87}}}):l)+'" class="nav-link py-1 ps-0"> '+u(typeof(l=null!=(l=c(n,"label")||(null!=t?c(t,"label"):t))?l:o)===s?l.call(i,{name:"label",hash:{},data:r,loc:{start:{line:4,column:117},end:{line:4,column:126}}}):l)+" </a></li>\r\n\r\n"},compiler:[8,">= 4.3.0"],main:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"sitelinks"):t,{name:"each",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r,loc:{start:{line:2,column:0},end:{line:6,column:9}}}))?l:"")},useData:!0})},4002:(e,t,n)=>{var a=n(202);function r(e){return e&&(e.__esModule?e.default:e)}e.exports=(a.default||a).template({1:function(e,t,a,l,i){var o,s=null!=t?t:e.nullContext||{},u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(o=u(a,"if").call(s,r(n(336)).call(s,null!=t?u(t,"dropdown"):t,{name:"$not_empty_array",hash:{},data:i,loc:{start:{line:4,column:10},end:{line:4,column:37}}}),{name:"if",hash:{},fn:e.program(2,i,0),inverse:e.program(5,i,0),data:i,loc:{start:{line:4,column:4},end:{line:23,column:11}}}))?o:"")+"\r\n"},2:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n        <div class="htsa-dropdown-item">\r\n            <a href="#" class="item px-4 text-uppercase fw-normal htsa-dropdown-link has-arrow" aria-expanded="false"> '+e.escapeExpression(e.lambda(null!=t?i(t,"label"):t,t))+' </a>\r\n            <div class="ui divided list my-0 bg-white htsa-dropdown-menu animate__animated animate__bounce">\r\n\r\n'+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"dropdown"):t,{name:"each",hash:{},fn:e.program(3,r,0),inverse:e.noop,data:r,loc:{start:{line:10,column:16},end:{line:14,column:25}}}))?l:"")+"\r\n            </div>\r\n        </div>\r\n\r\n"},3:function(e,t,n,a,r){var l=e.lambda,i=e.escapeExpression,o=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n                    <a href="'+i(l(null!=t?o(t,"url"):t,t))+'" class="item border-top py-2 ps-5 fw-light text-capitalize"> '+i(l(null!=t?o(t,"label"):t,t))+" </a>\r\n\r\n"},5:function(e,t,a,l,i){var o=e.lambda,s=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n        <a href="'+s(o(null!=t?u(t,"url"):t,t))+'" class="'+s(r(n(4153)).call(null!=t?t:e.nullContext||{},null!=t?u(t,"active"):t,{name:"$activeMenuLink",hash:{},data:i,loc:{start:{line:21,column:33},end:{line:21,column:60}}}))+' item px-4 text-uppercase fw-normal"> '+s(o(null!=t?u(t,"label"):t,t))+" </a>\r\n\r\n"},compiler:[8,">= 4.3.0"],main:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"mobile"):t,{name:"each",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r,loc:{start:{line:2,column:0},end:{line:25,column:9}}}))?l:"")},useData:!0})},32:(e,t,n)=>{var a=n(202);function r(e){return e&&(e.__esModule?e.default:e)}e.exports=(a.default||a).template({1:function(e,t,n,a,r){var l,i=e.lambda,o=e.escapeExpression,s=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <div class="ui hidden divider"></div>\r\n    <h3 class="ui horizontal section header divider text-capitalize d-none d-sm-table"> '+o(i(null!=(l=null!=t?s(t,"all"):t)?s(l,"length"):l,t))+' Comments on this post</h3>\r\n    <h3 class="fw-normal text-center text-capitalize border-bottom pb-2 d-sm-none"> '+o(i(null!=(l=null!=t?s(t,"all"):t)?s(l,"length"):l,t))+' Comments on this post</h3>\r\n    \x3c!-- Comments --\x3e\r\n    <div class="ui small feed" >\r\n\r\n'+(null!=(l=s(n,"each").call(null!=t?t:e.nullContext||{},null!=t?s(t,"all"):t,{name:"each",hash:{},fn:e.program(2,r,0),inverse:e.noop,data:r,loc:{start:{line:10,column:4},end:{line:68,column:13}}}))?l:"")+"\r\n    </div>\r\n    \x3c!-- End Comments --\x3e\r\n\r\n"},2:function(e,t,a,l,i){var o,s=e.lambda,u=e.escapeExpression,c=null!=t?t:e.nullContext||{},d=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n        <div class="event">\r\n            <div class="label d-none">\r\n                <i class="circular user icon"></i>\r\n            </div>\r\n            <div class="content ms-0">\r\n                <div class="summary">\r\n                    <a href=""> '+u(s(null!=t?d(t,"name"):t,t))+' </a> added a comment\r\n                    <div class="date"> '+u(s(null!=t?d(t,"date"):t,t))+' </div>\r\n                </div>\r\n                <div class="extra text"> '+u(s(null!=t?d(t,"comment"):t,t))+' </div>\r\n                <div class="meta">\r\n                    <a class="like">\r\n                        <i class="like icon"></i>\r\n\r\n'+(null!=(o=d(a,"if").call(c,r(n(7949)).call(c,null!=t?d(t,"likes"):t,{name:"$not_empty",hash:{},data:i,loc:{start:{line:26,column:30},end:{line:26,column:48}}}),{name:"if",hash:{},fn:e.program(3,i,0),inverse:e.noop,data:i,loc:{start:{line:26,column:24},end:{line:30,column:31}}}))?o:"")+"\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n"+(null!=(o=d(a,"if").call(c,r(n(336)).call(c,null!=t?d(t,"replies"):t,{name:"$not_empty_array",hash:{},data:i,loc:{start:{line:37,column:14},end:{line:37,column:40}}}),{name:"if",hash:{},fn:e.program(5,i,0),inverse:e.noop,data:i,loc:{start:{line:37,column:8},end:{line:66,column:15}}}))?o:"")+"\r\n"},3:function(e,t,n,a,r){var l=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n                            "+e.escapeExpression(e.lambda(null!=t?l(t,"likes"):t,t))+" likes\r\n\r\n"},5:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"replies"):t,{name:"each",hash:{},fn:e.program(6,r,0),inverse:e.noop,data:r,loc:{start:{line:38,column:12},end:{line:65,column:21}}}))?l:""},6:function(e,t,a,l,i){var o,s=e.lambda,u=e.escapeExpression,c=null!=t?t:e.nullContext||{},d=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n                <div class="event">\r\n                    <div class="label d-none">\r\n                        <i class="circular user icon"></i>\r\n                    </div>\r\n                    <div class="content ms-0">\r\n                        <div class="summary">\r\n                            <a href=""> '+u(s(null!=t?d(t,"name"):t,t))+' </a> replied to <a href=""> '+u(s(null!=t?d(t,"reply_name"):t,t))+'\'s</a> comment\r\n                            <div class="date"> '+u(s(null!=t?d(t,"date"):t,t))+' </div>\r\n                        </div>\r\n                        <div class="extra text"> '+u(s(null!=t?d(t,"comment"):t,t))+' </div>\r\n                        <div class="meta">\r\n                            <a class="like">\r\n                                <i class="like icon"></i>\r\n\r\n'+(null!=(o=d(a,"if").call(c,r(n(7949)).call(c,null!=t?d(t,"likes"):t,{name:"$not_empty",hash:{},data:i,loc:{start:{line:54,column:38},end:{line:54,column:56}}}),{name:"if",hash:{},fn:e.program(7,i,0),inverse:e.noop,data:i,loc:{start:{line:54,column:32},end:{line:58,column:39}}}))?o:"")+"\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n"},7:function(e,t,n,a,r){var l=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n                                    "+e.escapeExpression(e.lambda(null!=t?l(t,"likes"):t,t))+" likes\r\n\r\n"},9:function(e,t,n,a,r){return'\r\n    <div class="ui hidden divider"></div>\r\n    <p class="fs-3 fw-normal text-center text-muted"> Be the first to add a comment on this post </p>\r\n\r\n'},compiler:[8,">= 4.3.0"],main:function(e,t,a,l,i){var o,s=null!=t?t:e.nullContext||{},u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(o=u(a,"if").call(s,r(n(336)).call(s,null!=t?u(t,"all"):t,{name:"$not_empty_array",hash:{},data:i,loc:{start:{line:2,column:6},end:{line:2,column:28}}}),{name:"if",hash:{},fn:e.program(1,i,0),inverse:e.program(9,i,0),data:i,loc:{start:{line:2,column:0},end:{line:78,column:7}}}))?o:"")},useData:!0})},3972:(e,t,n)=>{var a=n(202);function r(e){return e&&(e.__esModule?e.default:e)}e.exports=(a.default||a).template({1:function(e,t,n,a,r){var l,i=e.lambda,o=e.escapeExpression,s=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <div class="ui hidden divider"></div>\r\n    <h3 class="ui horizontal section header divider text-capitalize d-none d-sm-table"> '+o(i(null!=(l=null!=t?s(t,"all"):t)?s(l,"length"):l,t))+' Comments on this post</h3>\r\n    <h3 class="fw-normal text-center text-capitalize border-bottom pb-2 d-sm-none"> '+o(i(null!=(l=null!=t?s(t,"all"):t)?s(l,"length"):l,t))+' Comments on this post</h3>\r\n    \x3c!-- Comments --\x3e\r\n    <div class="ui small threaded comments" >\r\n\r\n'+(null!=(l=s(n,"each").call(null!=t?t:e.nullContext||{},null!=t?s(t,"all"):t,{name:"each",hash:{},fn:e.program(2,r,0),inverse:e.noop,data:r,loc:{start:{line:10,column:4},end:{line:65,column:13}}}))?l:"")+"\r\n    </div>\r\n    \x3c!-- End Comments --\x3e\r\n\r\n"},2:function(e,t,a,l,i){var o,s=e.lambda,u=e.escapeExpression,c=null!=t?t:e.nullContext||{},d=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n        <div class="comment">\r\n            <a class="avatar d-none">\r\n                <i class="user icon fs-2"></i>\r\n            </a>\r\n            <div class="content ms-0">\r\n                <a class="author"> '+u(s(null!=t?d(t,"name"):t,t))+' </a>\r\n                <div class="metadata">\r\n                    <span class="date"> '+u(s(null!=t?d(t,"date"):t,t))+' </span>\r\n                    <div class="rating d-none">\r\n                        <i class="star icon"></i>\r\n                        '+u(s(null!=t?d(t,"likes"):t,t))+' Faves\r\n                    </div>\r\n                </div>\r\n                <div class="text"> '+u(s(null!=t?d(t,"comment"):t,t))+' </div>\r\n                <div class="actions">\r\n                    <a class="reply">Reply</a>\r\n                </div>\r\n            </div>\r\n\r\n'+(null!=(o=d(a,"if").call(c,r(n(336)).call(c,null!=t?d(t,"replies"):t,{name:"$not_empty_array",hash:{},data:i,loc:{start:{line:31,column:18},end:{line:31,column:44}}}),{name:"if",hash:{},fn:e.program(3,i,0),inverse:e.noop,data:i,loc:{start:{line:31,column:12},end:{line:61,column:19}}}))?o:"")+"\r\n        </div>\r\n\r\n"},3:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n            <div class="comments m-0">\r\n\r\n'+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"replies"):t,{name:"each",hash:{},fn:e.program(4,r,0),inverse:e.noop,data:r,loc:{start:{line:35,column:16},end:{line:57,column:25}}}))?l:"")+"\r\n            </div>\r\n\r\n"},4:function(e,t,n,a,r){var l=e.lambda,i=e.escapeExpression,o=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n                    <div class="comment">\r\n                        <a class="avatar d-none">\r\n                            <i class="user icon fs-2"></i>\r\n                        </a>\r\n                        <div class="content ms-0">\r\n                            <a class="author"> '+i(l(null!=t?o(t,"name"):t,t))+' </a>\r\n                            <div class="metadata">\r\n                                <span class="date"> '+i(l(null!=t?o(t,"date"):t,t))+' </span>\r\n                                <div class="rating d-none">\r\n                                    <i class="star icon"></i>\r\n                                    '+i(l(null!=t?o(t,"likes"):t,t))+' Faves\r\n                                </div>\r\n                            </div>\r\n                            <div class="text"> '+i(l(null!=t?o(t,"comment"):t,t))+' </div>\r\n                            <div class="actions">\r\n                                <a class="reply">Reply</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n'},6:function(e,t,n,a,r){return'\r\n    <div class="ui hidden divider"></div>\r\n    <p class="fs-3 fw-normal text-center text-muted"> Be the first to add a comment on this post </p>\r\n\r\n'},compiler:[8,">= 4.3.0"],main:function(e,t,a,l,i){var o,s=null!=t?t:e.nullContext||{},u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(o=u(a,"if").call(s,r(n(336)).call(s,null!=t?u(t,"all"):t,{name:"$not_empty_array",hash:{},data:i,loc:{start:{line:2,column:6},end:{line:2,column:28}}}),{name:"if",hash:{},fn:e.program(1,i,0),inverse:e.program(6,i,0),data:i,loc:{start:{line:2,column:0},end:{line:75,column:7}}}))?o:"")},useData:!0})},4486:(e,t,n)=>{var a=n(202);function r(e){return e&&(e.__esModule?e.default:e)}e.exports=(a.default||a).template({1:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <div class="htsa-vertical-posts">\r\n\r\n'+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"all"):t,{name:"each",hash:{},fn:e.program(2,r,0),inverse:e.noop,data:r,loc:{start:{line:6,column:4},end:{line:38,column:13}}}))?l:"")+'\r\n    </div>\r\n\r\n    \x3c!-- Pagination --\x3e\r\n    <div class="ui black circular labels text-center">\r\n        <a class="ui label"><i class="left angle icon align-middle me-0"></i></a>\r\n        <a class="ui label">1</a>\r\n        <a class="ui label">2</a>\r\n        <a class="ui label">3</a>\r\n        <a class="ui label">4</a>\r\n        <a class="ui label">5</a>\r\n        <a class="ui label"><i class="right angle icon align-middle me-0"></i></a>\r\n    </div>\r\n    \x3c!-- End Pagination --\x3e\r\n\r\n'},2:function(e,t,a,l,i){var o,s=e.lambda,u=e.escapeExpression,c=null!=t?t:e.nullContext||{},d=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n        <div class="row flex-column flex-md-row align-items-center pb-3 mb-5 gx-3 gx-lg-5">\r\n            <div class="col-12">\r\n                <h1 class="fs-4 fw-normal text-capitalize"> <a href="'+u(s(null!=t?d(t,"url"):t,t))+'" class="link-dark"> '+u(s(null!=t?d(t,"title"):t,t))+' </a></h1>\r\n            </div>\r\n            <div class="col-md-4">\r\n                <a href="'+u(s(null!=t?d(t,"url"):t,t))+'">\r\n\r\n'+(null!=(o=d(a,"if").call(c,r(n(7949)).call(c,null!=t?d(t,"thumbnail"):t,{name:"$not_empty",hash:{},data:i,loc:{start:{line:15,column:26},end:{line:15,column:48}}}),{name:"if",hash:{},fn:e.program(3,i,0),inverse:e.program(5,i,0),data:i,loc:{start:{line:15,column:20},end:{line:23,column:27}}}))?o:"")+'\r\n                </a>\r\n            </div>\r\n            <div class="col-md-8">\r\n                <div class="mb-3">\r\n                    <small class="text-primary text-uppercase"> '+u(s(null!=t?d(t,"date"):t,t))+" </small>\r\n                    <p> "+u(r(n(8987)).call(c,null!=t?d(t,"content"):t,{name:"$stringExcerpt",hash:{},data:i,loc:{start:{line:30,column:24},end:{line:30,column:50}}}))+' </p>\r\n                    <div>\r\n                        <a href="'+u(s(null!=t?d(t,"url"):t,t))+'" class="btn btn-sm btn-outline-dark text-capitalize rounded-0">see post</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n'},3:function(e,t,n,a,r){var l=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n                        <img src="'+e.escapeExpression(e.lambda(null!=t?l(t,"thumbnail"):t,t))+'" alt="" class="img-fluid d-block mb-3" />\r\n\r\n'},5:function(e,t,n,a,r){return'\r\n                        <img src="./assets/images/image.png" alt="" class="img-fluid d-block mb-3" />\r\n\r\n'},7:function(e,t,n,a,r){return'\r\n<div>\r\n    <div class="ui centered medium image mb-2">\r\n        <img src="./assets/images/image.png" />\r\n    </div>\r\n    <p class="fs-5">\r\n        We are yet to add contents to this archive...\r\n    </p>\r\n</div>\r\n\r\n'},compiler:[8,">= 4.3.0"],main:function(e,t,a,l,i){var o,s=null!=t?t:e.nullContext||{},u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(o=u(a,"if").call(s,r(n(336)).call(s,null!=t?u(t,"all"):t,{name:"$not_empty_array",hash:{},data:i,loc:{start:{line:2,column:6},end:{line:2,column:28}}}),{name:"if",hash:{},fn:e.program(1,i,0),inverse:e.program(7,i,0),data:i,loc:{start:{line:2,column:0},end:{line:65,column:7}}}))?o:"")},useData:!0})},9663:(e,t,n)=>{var a=n(202);function r(e){return e&&(e.__esModule?e.default:e)}e.exports=(a.default||a).template({1:function(e,t,a,l,i){var o,s=null!=t?t:e.nullContext||{},u=e.lambda,c=e.escapeExpression,d=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n    <div>\r\n\r\n"+(null!=(o=d(a,"if").call(s,r(n(7949)).call(s,null!=t?d(t,"thumbnail"):t,{name:"$not_empty",hash:{},data:i,loc:{start:{line:6,column:14},end:{line:6,column:36}}}),{name:"if",hash:{},fn:e.program(2,i,0),inverse:e.program(4,i,0),data:i,loc:{start:{line:6,column:8},end:{line:14,column:15}}}))?o:"")+'\r\n            <div class="htsa-background-image-overlay">\r\n                <div class="h-100 vstack justify-content-between p-2 pe-5 p-sm-4 pe-sm-5">\r\n                    <div>\r\n                        <h1 class="fs-4 text-white text-capitalize fw-bold htsa-ff-roboto-slab"> '+c(u(null!=t?d(t,"title"):t,t))+' </h1>\r\n                        <p class="text-white d-none d-sm-block"> '+c(r(n(8987)).call(s,null!=t?d(t,"content"):t,{name:"$stringExcerpt",hash:{},data:i,loc:{start:{line:20,column:65},end:{line:20,column:91}}}))+' </p>\r\n                        <p>\r\n                            <small class="text-white fw-bold"> '+c(u(null!=t?d(t,"date"):t,t))+' </small>\r\n                        </p>\r\n                    </div>\r\n                    <div class="ui hidden divider d-none d-sm-block"></div>\r\n                    <div>\r\n                        <a href="'+c(u(null!=t?d(t,"url"):t,t))+'" class="btn btn-sm btn-outline-light">Read More</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n'},2:function(e,t,n,a,r){var l=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n        <div class="h-auto htsa-background-image htsa-background-image-scroll shadow-lg htsa-bg-dark" style="background-image: url(\''+e.escapeExpression(e.lambda(null!=t?l(t,"thumbnail"):t,t))+"');\">\r\n\r\n"},4:function(e,t,n,a,r){return'\r\n        <div class="h-auto htsa-background-image htsa-background-image-scroll shadow-lg htsa-bg-dark">\r\n\r\n'},compiler:[8,">= 4.3.0"],main:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"featured"):t,{name:"each",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r,loc:{start:{line:2,column:0},end:{line:34,column:9}}}))?l:"")},useData:!0})},9907:(e,t,n)=>{var a=n(202);function r(e){return e&&(e.__esModule?e.default:e)}e.exports=(a.default||a).template({1:function(e,t,n,a,r){var l,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n    <div class="htsa-vertical-posts">\r\n\r\n'+(null!=(l=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"results"):t,{name:"each",hash:{},fn:e.program(2,r,0),inverse:e.noop,data:r,loc:{start:{line:6,column:8},end:{line:33,column:17}}}))?l:"")+'\r\n    </div>\r\n\r\n    \x3c!-- Pagination --\x3e\r\n    <div class="ui black circular labels text-center">\r\n        <a class="ui label"><i class="left angle icon align-middle me-0"></i></a>\r\n        <a class="ui label">1</a>\r\n        <a class="ui label">2</a>\r\n        <a class="ui label">3</a>\r\n        <a class="ui label">4</a>\r\n        <a class="ui label">5</a>\r\n        <a class="ui label"><i class="right angle icon align-middle me-0"></i></a>\r\n    </div>\r\n    \x3c!-- End Pagination --\x3e\r\n\r\n'},2:function(e,t,a,l,i){var o,s=e.lambda,u=e.escapeExpression,c=null!=t?t:e.nullContext||{},d=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n            <div class="row flex-column flex-md-row align-items-center pb-3 mb-5 g-3 g-lg-5">\r\n                <div class="col-md-4">\r\n                    <a href="'+u(s(null!=t?d(t,"url"):t,t))+'">\r\n\r\n'+(null!=(o=d(a,"if").call(c,r(n(7949)).call(c,null!=t?d(t,"thumbnail"):t,{name:"$not_empty",hash:{},data:i,loc:{start:{line:12,column:30},end:{line:12,column:52}}}),{name:"if",hash:{},fn:e.program(3,i,0),inverse:e.program(5,i,0),data:i,loc:{start:{line:12,column:24},end:{line:20,column:31}}}))?o:"")+'                    </a>\r\n                </div>\r\n                <div class="col-md-8">\r\n                    <h1 class="fs-4 fw-normal text-capitalize"> <a href="'+u(s(null!=t?d(t,"url"):t,t))+'" class="link-dark"> '+u(s(null!=t?d(t,"title"):t,t))+' </a></h1>\r\n                    <small class="text-muted text-uppercase"> '+u(s(null!=t?d(t,"post_type"):t,t))+" </small>\r\n                    <p> "+u(r(n(8987)).call(c,null!=t?d(t,"content"):t,{name:"$stringExcerpt",hash:{},data:i,loc:{start:{line:26,column:24},end:{line:26,column:50}}}))+' </p>\r\n                    <div>\r\n                        <a href="'+u(s(null!=t?d(t,"url"):t,t))+'" class="btn btn-sm btn-outline-dark text-capitalize rounded-0">see post</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n'},3:function(e,t,n,a,r){var l=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'\r\n                            <img src="'+e.escapeExpression(e.lambda(null!=t?l(t,"thumbnail"):t,t))+'" alt="" class="img-fluid" />\r\n\r\n'},5:function(e,t,n,a,r){return'\r\n                            <img src="./assets/images/image.png" alt="" class="img-fluid" />\r\n\r\n'},7:function(e,t,n,a,r){return'\r\n<div>\r\n    <div class="ui centered medium image mb-2">\r\n        <img src="./assets/images/image.png" />\r\n    </div>\r\n    <p class="fs-5">\r\n        We could not find any results for your query...\r\n    </p>\r\n</div>\r\n\r\n'},compiler:[8,">= 4.3.0"],main:function(e,t,a,l,i){var o,s=null!=t?t:e.nullContext||{},u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"\r\n"+(null!=(o=u(a,"if").call(s,r(n(336)).call(s,null!=t?u(t,"results"):t,{name:"$not_empty_array",hash:{},data:i,loc:{start:{line:2,column:6},end:{line:2,column:32}}}),{name:"if",hash:{},fn:e.program(1,i,0),inverse:e.program(7,i,0),data:i,loc:{start:{line:2,column:0},end:{line:60,column:7}}}))?o:"")},useData:!0})},6834:(e,t,n)=>{"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}t.__esModule=!0;var l=r(n(2067)),i=a(n(5558)),o=a(n(8728)),s=r(n(2392)),u=r(n(1628)),c=a(n(3982));function d(){var e=new l.HandlebarsEnvironment;return s.extend(e,l),e.SafeString=i.default,e.Exception=o.default,e.Utils=s,e.escapeExpression=s.escapeExpression,e.VM=u,e.template=function(t){return u.template(t,e)},e}var p=d();p.create=d,c.default(p),p.default=p,t.default=p,e.exports=t.default},2067:(e,t,n)=>{"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.HandlebarsEnvironment=d;var r=n(2392),l=a(n(8728)),i=n(2638),o=n(881),s=a(n(8037)),u=n(6293);t.VERSION="4.7.7",t.COMPILER_REVISION=8,t.LAST_COMPATIBLE_COMPILER_REVISION=7,t.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0 <4.3.0",8:">= 4.3.0"};var c="[object Object]";function d(e,t,n){this.helpers=e||{},this.partials=t||{},this.decorators=n||{},i.registerDefaultHelpers(this),o.registerDefaultDecorators(this)}d.prototype={constructor:d,logger:s.default,log:s.default.log,registerHelper:function(e,t){if(r.toString.call(e)===c){if(t)throw new l.default("Arg not supported with multiple helpers");r.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if(r.toString.call(e)===c)r.extend(this.partials,e);else{if(void 0===t)throw new l.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if(r.toString.call(e)===c){if(t)throw new l.default("Arg not supported with multiple decorators");r.extend(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]},resetLoggedPropertyAccesses:function(){u.resetLoggedProperties()}};var p=s.default.log;t.log=p,t.createFrame=r.createFrame,t.logger=s.default},881:(e,t,n)=>{"use strict";t.__esModule=!0,t.registerDefaultDecorators=function(e){r.default(e)};var a,r=(a=n(5670))&&a.__esModule?a:{default:a}},5670:(e,t,n)=>{"use strict";t.__esModule=!0;var a=n(2392);t.default=function(e){e.registerDecorator("inline",(function(e,t,n,r){var l=e;return t.partials||(t.partials={},l=function(r,l){var i=n.partials;n.partials=a.extend({},i,t.partials);var o=e(r,l);return n.partials=i,o}),t.partials[r.args[0]]=r.fn,l}))},e.exports=t.default},8728:(e,t)=>{"use strict";t.__esModule=!0;var n=["description","fileName","lineNumber","endLineNumber","message","name","number","stack"];function a(e,t){var r=t&&t.loc,l=void 0,i=void 0,o=void 0,s=void 0;r&&(l=r.start.line,i=r.end.line,o=r.start.column,s=r.end.column,e+=" - "+l+":"+o);for(var u=Error.prototype.constructor.call(this,e),c=0;c<n.length;c++)this[n[c]]=u[n[c]];Error.captureStackTrace&&Error.captureStackTrace(this,a);try{r&&(this.lineNumber=l,this.endLineNumber=i,Object.defineProperty?(Object.defineProperty(this,"column",{value:o,enumerable:!0}),Object.defineProperty(this,"endColumn",{value:s,enumerable:!0})):(this.column=o,this.endColumn=s))}catch(e){}}a.prototype=new Error,t.default=a,e.exports=t.default},2638:(e,t,n)=>{"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.registerDefaultHelpers=function(e){r.default(e),l.default(e),i.default(e),o.default(e),s.default(e),u.default(e),c.default(e)},t.moveHelperToHooks=function(e,t,n){e.helpers[t]&&(e.hooks[t]=e.helpers[t],n||delete e.helpers[t])};var r=a(n(7342)),l=a(n(6822)),i=a(n(4905)),o=a(n(7405)),s=a(n(5702)),u=a(n(7593)),c=a(n(3978))},7342:(e,t,n)=>{"use strict";t.__esModule=!0;var a=n(2392);t.default=function(e){e.registerHelper("blockHelperMissing",(function(t,n){var r=n.inverse,l=n.fn;if(!0===t)return l(this);if(!1===t||null==t)return r(this);if(a.isArray(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):r(this);if(n.data&&n.ids){var i=a.createFrame(n.data);i.contextPath=a.appendContextPath(n.data.contextPath,n.name),n={data:i}}return l(t,n)}))},e.exports=t.default},6822:(e,t,n)=>{"use strict";t.__esModule=!0;var a,r=n(2392),l=(a=n(8728))&&a.__esModule?a:{default:a};t.default=function(e){e.registerHelper("each",(function(e,t){if(!t)throw new l.default("Must pass iterator to #each");var a,i=t.fn,o=t.inverse,s=0,u="",c=void 0,d=void 0;function p(t,n,a){c&&(c.key=t,c.index=n,c.first=0===n,c.last=!!a,d&&(c.contextPath=d+t)),u+=i(e[t],{data:c,blockParams:r.blockParams([e[t],t],[d+t,null])})}if(t.data&&t.ids&&(d=r.appendContextPath(t.data.contextPath,t.ids[0])+"."),r.isFunction(e)&&(e=e.call(this)),t.data&&(c=r.createFrame(t.data)),e&&"object"==typeof e)if(r.isArray(e))for(var m=e.length;s<m;s++)s in e&&p(s,s,s===e.length-1);else if(n.g.Symbol&&e[n.g.Symbol.iterator]){for(var f=[],h=e[n.g.Symbol.iterator](),v=h.next();!v.done;v=h.next())f.push(v.value);for(m=(e=f).length;s<m;s++)p(s,s,s===e.length-1)}else a=void 0,Object.keys(e).forEach((function(e){void 0!==a&&p(a,s-1),a=e,s++})),void 0!==a&&p(a,s-1,!0);return 0===s&&(u=o(this)),u}))},e.exports=t.default},4905:(e,t,n)=>{"use strict";t.__esModule=!0;var a,r=(a=n(8728))&&a.__esModule?a:{default:a};t.default=function(e){e.registerHelper("helperMissing",(function(){if(1!==arguments.length)throw new r.default('Missing helper: "'+arguments[arguments.length-1].name+'"')}))},e.exports=t.default},7405:(e,t,n)=>{"use strict";t.__esModule=!0;var a,r=n(2392),l=(a=n(8728))&&a.__esModule?a:{default:a};t.default=function(e){e.registerHelper("if",(function(e,t){if(2!=arguments.length)throw new l.default("#if requires exactly one argument");return r.isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||r.isEmpty(e)?t.inverse(this):t.fn(this)})),e.registerHelper("unless",(function(t,n){if(2!=arguments.length)throw new l.default("#unless requires exactly one argument");return e.helpers.if.call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})}))},e.exports=t.default},5702:(e,t)=>{"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("log",(function(){for(var t=[void 0],n=arguments[arguments.length-1],a=0;a<arguments.length-1;a++)t.push(arguments[a]);var r=1;null!=n.hash.level?r=n.hash.level:n.data&&null!=n.data.level&&(r=n.data.level),t[0]=r,e.log.apply(e,t)}))},e.exports=t.default},7593:(e,t)=>{"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("lookup",(function(e,t,n){return e?n.lookupProperty(e,t):e}))},e.exports=t.default},3978:(e,t,n)=>{"use strict";t.__esModule=!0;var a,r=n(2392),l=(a=n(8728))&&a.__esModule?a:{default:a};t.default=function(e){e.registerHelper("with",(function(e,t){if(2!=arguments.length)throw new l.default("#with requires exactly one argument");r.isFunction(e)&&(e=e.call(this));var n=t.fn;if(r.isEmpty(e))return t.inverse(this);var a=t.data;return t.data&&t.ids&&((a=r.createFrame(t.data)).contextPath=r.appendContextPath(t.data.contextPath,t.ids[0])),n(e,{data:a,blockParams:r.blockParams([e],[a&&a.contextPath])})}))},e.exports=t.default},8572:(e,t,n)=>{"use strict";t.__esModule=!0,t.createNewLookupObject=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return a.extend.apply(void 0,[Object.create(null)].concat(t))};var a=n(2392)},6293:(e,t,n)=>{"use strict";t.__esModule=!0,t.createProtoAccessControl=function(e){var t=Object.create(null);t.constructor=!1,t.__defineGetter__=!1,t.__defineSetter__=!1,t.__lookupGetter__=!1;var n=Object.create(null);return n.__proto__=!1,{properties:{whitelist:a.createNewLookupObject(n,e.allowedProtoProperties),defaultValue:e.allowProtoPropertiesByDefault},methods:{whitelist:a.createNewLookupObject(t,e.allowedProtoMethods),defaultValue:e.allowProtoMethodsByDefault}}},t.resultIsAllowed=function(e,t,n){return function(e,t){return void 0!==e.whitelist[t]?!0===e.whitelist[t]:void 0!==e.defaultValue?e.defaultValue:(function(e){!0!==l[e]&&(l[e]=!0,r.log("error",'Handlebars: Access has been denied to resolve the property "'+e+'" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(t),!1)}("function"==typeof e?t.methods:t.properties,n)},t.resetLoggedProperties=function(){Object.keys(l).forEach((function(e){delete l[e]}))};var a=n(8572),r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(8037)),l=Object.create(null)},5005:(e,t)=>{"use strict";t.__esModule=!0,t.wrapHelper=function(e,t){return"function"!=typeof e?e:function(){return arguments[arguments.length-1]=t(arguments[arguments.length-1]),e.apply(this,arguments)}}},8037:(e,t,n)=>{"use strict";t.__esModule=!0;var a=n(2392),r={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var t=a.indexOf(r.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=r.lookupLevel(e),"undefined"!=typeof console&&r.lookupLevel(r.level)<=e){var t=r.methodMap[e];console[t]||(t="log");for(var n=arguments.length,a=Array(n>1?n-1:0),l=1;l<n;l++)a[l-1]=arguments[l];console[t].apply(console,a)}}};t.default=r,e.exports=t.default},3982:(e,t,n)=>{"use strict";t.__esModule=!0,t.default=function(e){var t=void 0!==n.g?n.g:window,a=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=a),e}},e.exports=t.default},1628:(e,t,n)=>{"use strict";t.__esModule=!0,t.checkRevision=function(e){var t=e&&e[0]||1,n=i.COMPILER_REVISION;if(!(t>=i.LAST_COMPATIBLE_COMPILER_REVISION&&t<=i.COMPILER_REVISION)){if(t<i.LAST_COMPATIBLE_COMPILER_REVISION){var a=i.REVISION_CHANGES[n],r=i.REVISION_CHANGES[t];throw new l.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+a+") or downgrade your runtime to an older version ("+r+").")}throw new l.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}},t.template=function(e,t){if(!t)throw new l.default("No environment passed to template");if(!e||!e.main)throw new l.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var n=e.compiler&&7===e.compiler[0],a={strict:function(e,t,n){if(!e||!(t in e))throw new l.default('"'+t+'" not defined in '+e,{loc:n});return a.lookupProperty(e,t)},lookupProperty:function(e,t){var n=e[t];return null==n||Object.prototype.hasOwnProperty.call(e,t)||u.resultIsAllowed(n,a.protoAccessControl,t)?n:void 0},lookup:function(e,t){for(var n=e.length,r=0;r<n;r++)if(null!=(e[r]&&a.lookupProperty(e[r],t)))return e[r][t]},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:r.escapeExpression,invokePartial:function(n,a,i){i.hash&&(a=r.extend({},a,i.hash),i.ids&&(i.ids[0]=!0)),n=t.VM.resolvePartial.call(this,n,a,i);var o=r.extend({},i,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),s=t.VM.invokePartial.call(this,n,a,o);if(null==s&&t.compile&&(i.partials[i.name]=t.compile(n,e.compilerOptions,t),s=i.partials[i.name](a,o)),null!=s){if(i.indent){for(var u=s.split("\n"),c=0,d=u.length;c<d&&(u[c]||c+1!==d);c++)u[c]=i.indent+u[c];s=u.join("\n")}return s}throw new l.default("The partial "+i.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var n=e[t];return n.decorator=e[t+"_d"],n},programs:[],program:function(e,t,n,a,r){var l=this.programs[e],i=this.fn(e);return t||r||a||n?l=c(this,e,i,t,n,a,r):l||(l=this.programs[e]=c(this,e,i)),l},data:function(e,t){for(;e&&t--;)e=e._parent;return e},mergeIfNeeded:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=r.extend({},t,e)),n},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function i(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],r=n.data;i._setup(n),!n.partial&&e.useData&&(r=p(t,r));var l=void 0,o=e.useBlockParams?[]:void 0;function s(t){return""+e.main(a,t,a.helpers,a.partials,r,o,l)}return e.useDepths&&(l=n.depths?t!=n.depths[0]?[t].concat(n.depths):n.depths:[t]),(s=m(e.main,s,a,n.depths||[],r,o))(t,n)}return i.isTop=!0,i._setup=function(l){if(l.partial)a.protoAccessControl=l.protoAccessControl,a.helpers=l.helpers,a.partials=l.partials,a.decorators=l.decorators,a.hooks=l.hooks;else{var i=r.extend({},t.helpers,l.helpers);!function(e,t){Object.keys(e).forEach((function(n){var a=e[n];e[n]=function(e,t){var n=t.lookupProperty;return s.wrapHelper(e,(function(e){return r.extend({lookupProperty:n},e)}))}(a,t)}))}(i,a),a.helpers=i,e.usePartial&&(a.partials=a.mergeIfNeeded(l.partials,t.partials)),(e.usePartial||e.useDecorators)&&(a.decorators=r.extend({},t.decorators,l.decorators)),a.hooks={},a.protoAccessControl=u.createProtoAccessControl(l);var c=l.allowCallsToHelperMissing||n;o.moveHelperToHooks(a,"helperMissing",c),o.moveHelperToHooks(a,"blockHelperMissing",c)}},i._child=function(t,n,r,i){if(e.useBlockParams&&!r)throw new l.default("must pass block params");if(e.useDepths&&!i)throw new l.default("must pass parent depths");return c(a,t,e[t],n,0,r,i)},i},t.wrapProgram=c,t.resolvePartial=function(e,t,n){return e?e.call||n.name||(n.name=e,e=n.partials[e]):e="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name],e},t.invokePartial=function(e,t,n){var a=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var o=void 0;if(n.fn&&n.fn!==d&&function(){n.data=i.createFrame(n.data);var e=n.fn;o=n.data["partial-block"]=function(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=i.createFrame(n.data),n.data["partial-block"]=a,e(t,n)},e.partials&&(n.partials=r.extend({},n.partials,e.partials))}(),void 0===e&&o&&(e=o),void 0===e)throw new l.default("The partial "+n.name+" could not be found");if(e instanceof Function)return e(t,n)},t.noop=d;var a,r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(2392)),l=(a=n(8728))&&a.__esModule?a:{default:a},i=n(2067),o=n(2638),s=n(5005),u=n(6293);function c(e,t,n,a,r,l,i){function o(t){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=i;return!i||t==i[0]||t===e.nullContext&&null===i[0]||(o=[t].concat(i)),n(e,t,e.helpers,e.partials,r.data||a,l&&[r.blockParams].concat(l),o)}return(o=m(n,o,e,i,a,l)).program=t,o.depth=i?i.length:0,o.blockParams=r||0,o}function d(){return""}function p(e,t){return t&&"root"in t||((t=t?i.createFrame(t):{}).root=e),t}function m(e,t,n,a,l,i){if(e.decorator){var o={};t=e.decorator(t,o,n,a&&a[0],l,i,a),r.extend(t,o)}return t}},5558:(e,t)=>{"use strict";function n(e){this.string=e}t.__esModule=!0,n.prototype.toString=n.prototype.toHTML=function(){return""+this.string},t.default=n,e.exports=t.default},2392:(e,t)=>{"use strict";t.__esModule=!0,t.extend=i,t.indexOf=function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n]===t)return n;return-1},t.escapeExpression=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}return r.test(e)?e.replace(a,l):e},t.isEmpty=function(e){return!e&&0!==e||!(!u(e)||0!==e.length)},t.createFrame=function(e){var t=i({},e);return t._parent=e,t},t.blockParams=function(e,t){return e.path=t,e},t.appendContextPath=function(e,t){return(e?e+".":"")+t};var n={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},a=/[&<>"'`=]/g,r=/[&<>"'`=]/;function l(e){return n[e]}function i(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}var o=Object.prototype.toString;t.toString=o;var s=function(e){return"function"==typeof e};s(/x/)&&(t.isFunction=s=function(e){return"function"==typeof e&&"[object Function]"===o.call(e)}),t.isFunction=s;var u=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===o.call(e)};t.isArray=u},202:(e,t,n)=>{e.exports=n(6834).default},5206:e=>{"use strict";e.exports=JSON.parse('{"featured":[{"thumbnail":"./assets/images/atma-accident-4.jpg","title":"Accident happened today along the express","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"2022-01-12","url":"single-post.html"},{"thumbnail":"./assets/images/atma-operation-4.jpg","title":"MD visits those involved in bloody auto crash","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"2022-01-18","url":"single-post.html"},{"thumbnail":"./assets/images/atma-operation-3.jpg","title":"Slow down on the runway","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"2022-03-22","url":"single-post.html"}],"all":[{"thumbnail":"./assets/images/atma-vehicle.jpg","title":"driving in severe weather","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"1st April, 2022","url":"single-post.html"},{"thumbnail":"./assets/images/atma-accident-3.jpg","title":"new school bus safety campaign","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"8th May, 2022","url":"single-post.html"},{"thumbnail":"./assets/images/atma-vehicle-2.jpg","title":"requirements for obtaining a drivers license ","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"11th May, 2022","url":"single-post.html"},{"thumbnail":"","title":"latest update on the penalties for over-speeding","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"3rd June, 2022","url":"single-post.html"}]}')},9045:e=>{"use strict";e.exports=JSON.parse('{"all":[{"id":1,"name":"Joe Henderson","comment":"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Voluptatem necessitatibus accusamus numquam eaque nihil architecto eius commodi temporibus quos! Veritatis expedita ipsa, nam accusantium maiores fuga! Beatae repellat quidem et.","date":"3 days ago","reply":0,"likes":"5"},{"id":2,"name":"Jane Doe","comment":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Magni illum quae officiis quasi, enim sequi qui dicta explicabo provident optio est voluptates in, veniam corporis quas debitis exercitationem aut quisquam!","date":"2 hours ago","reply":0,"likes":null,"replies":[{"id":3,"name":"Joe Henderson","comment":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Magni illum quae officiis quasi, enim sequi qui dicta explicabo provident optio est voluptates in, veniam corporis quas debitis exercitationem aut quisquam!","date":"2 minutes ago","reply":2,"reply_name":"Jane Doe","likes":null},{"id":3,"name":"Matt Grill","comment":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Magni illum quae officiis quasi, enim sequi qui dicta explicabo provident optio est voluptates in, veniam corporis quas debitis exercitationem aut quisquam!","date":"Just Now","reply":2,"reply_name":"Jane Doe","likes":null}]},{"id":1,"name":"Rita Dick","comment":"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Voluptatem necessitatibus accusamus numquam eaque nihil architecto eius commodi temporibus quos! Veritatis expedita ipsa, nam accusantium maiores fuga! Beatae repellat quidem et.","date":"1 day ago","reply":0,"likes":"2"}]}')},2552:e=>{"use strict";e.exports=JSON.parse('{"mobile":[{"label":"news","url":"#","active":true,"dropdown":[{"label":"MD","url":"#"},{"label":"press releases","url":"#"},{"label":"events / programs","url":"#"},{"label":"other news","url":"#"}]},{"label":"principal officers","url":"#","active":true},{"label":"our responsibilities","url":"responsibilities.html"},{"label":"resources","url":"#","dropdown":[{"label":"events / programs","url":"#"},{"label":"offices","url":"#"},{"label":"careers","url":"#"},{"label":"speeches and presentations","url":"#"}]},{"label":"traffic offense penalty","url":"#"},{"label":"contact","url":"contact.html"}],"pc":[{"label":"resources","url":"#","active":true,"dropdown":[{"label":"news","url":"posts.html"},{"label":"events / programs","url":"#"},{"label":"MD","url":"#"},{"label":"contact","url":"contact.html"}]},{"label":"principal officers","url":"profiles.html"},{"label":"our responsibilities","url":"responsibilities.html"},{"label":"about us","url":"about.html"}],"footer":[{"label":"news","url":"posts.html"},{"label":"principal officers","url":"#"},{"label":"our responsibilities","url":"responsibilities.html"},{"label":"events / programs","url":"#"},{"label":"contact","url":"contact.html"},{"label":"about us","url":"about.html"}],"sitelinks":[{"label":"offices","url":"#"},{"label":"careers","url":"#"},{"label":"news","url":"posts.html"},{"label":"widgets","url":"widgets.html"},{"label":"empty page","url":"empty.html"},{"label":"events / programs","url":"#"},{"label":"our responsibilities","url":"responsibilities.html"},{"label":"principal officers","url":"#"},{"label":"contact","url":"contact.html"},{"label":"about us","url":"about.html"},{"label":"traffic offense penalty","url":"#"},{"label":"MD","url":"#"}]}')},9396:e=>{"use strict";e.exports=JSON.parse('{"frontpage":[{"image_url":"./assets/images/anambra-icon.png","title":"Driver License Registeration","description":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Atque at quas esse recusandae veritatis incidunt minima debitis obcaecati.","action_text":"get a license","action_url":""},{"image_url":"./assets/images/anambra-icon.png","title":"Vehicle Identification Portal","description":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Atque at quas esse recusandae veritatis incidunt minima debitis obcaecati.","action_text":"identify your vehicle","action_url":""},{"image_url":"./assets/images/anambra-icon.png","title":"Road Transport Safety","description":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Atque at quas esse recusandae veritatis incidunt minima debitis obcaecati.","action_text":"contact road safety","action_url":""},{"image_url":"./assets/images/anambra-icon.png","title":"Speed Limit Device Portal","description":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Atque at quas esse recusandae veritatis incidunt minima debitis obcaecati.","action_text":"check it out","action_url":""},{"image_url":"","title":"MD\'s office","description":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Atque at quas esse recusandae veritatis incidunt minima debitis obcaecati.","action_text":"contact the md","action_url":""}]}')},7525:e=>{"use strict";e.exports=JSON.parse('{"results":[{"thumbnail":"./assets/images/atma-operation-3.jpg","title":"Accident happened today along the express","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"2022-03-22","url":"single-post.html","categories":["uncategorized"],"post_type":"post"},{"thumbnail":"","title":"HTSA Resource","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"2022-03-03","url":"","categories":"","post_type":"page"},{"thumbnail":"./assets/images/atma-operation-2.jpg","title":"Requirements for obtaining a drivers license","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"2022-04-12","url":"single-post.html","categories":["road tips","road safety"],"post_type":"post"},{"thumbnail":"./assets/images/atma-operation-4.jpg","title":"Latest update on the penalties for over-speeding ","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"2022-05-02","url":"single-post.html","categories":["road safety"],"post_type":"post"}]}')},1473:e=>{"use strict";e.exports=JSON.parse('{"frontpage":[{"label":"lives lost on N.G roads in 2022","value":"38,824"},{"label":"drunk-driving fatalities","value":"11,654"},{"label":"speeding related traffic deaths","value":"11,258"}]}')},6577:e=>{"use strict";e.exports=JSON.parse('{"trending":[{"thumbnail":"","title":"speeding","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"2022-01-12","url":""},{"thumbnail":"","title":"seat belts","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"2022-01-12","url":""},{"thumbnail":"","title":"drunk driving","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"2022-01-12","url":""},{"thumbnail":"","title":"traffic lights","content":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias voluptates aliquam consequatur? Quas distinctio modi eligendi laboriosam deserunt tempora id quaerat reiciendis? Ea nesciunt blanditiis repellendus beatae neque, unde tempore! Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate iure laborum error amet facilis, totam laudantium molestias nostrum aperiam repellat deleniti, quis rerum atque quia consectetur recusandae repellendus perferendis neque. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati iure laborum dolores officia perspiciatis inventore. Natus ratione alias eaque culpa nulla, cupiditate odit ab, qui, pariatur accusamus eum consectetur maxime.","date":"2022-01-12","url":""}]}')}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var l=t[a]={exports:{}};return e[a](l,l.exports,n),l.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{const e=n(4002),t=n(5585),a=n(7597),r=n(8316),l=n(9793),i=n(1739),o=n(7639),s=n(6550),u=n(9907),c=n(4486),d=n(32),p=n(3972),m=n(145),f=n(4210),h=n(9663),v=n(2552),b=n(1473),g=n(9396),y=n(5206),x=n(7525),q=n(6577),w=n(9045),_=$('[data-htsa-id="mobileMenu"]'),P=$('[data-htsa-id="pcMenuRight"]'),k=$('[data-htsa-id="footerMenu"]'),O=$('[data-htsa-id="aboutHTSAMenu"]'),C=$('[data-htsa-id="frontpageStatistics"]'),M=$('[data-htsa-id="frontpageResources"]'),j=$('[data-htsa-id="featuredBlogCarousel"]'),E=$('[data-htsa-id="latestBlogs"]'),L=$('[data-htsa-id="searchResults"]'),A=$('[data-htsa-id="postListings"]'),N=$('[data-htsa-id="postComments"]'),S=$('[data-htsa-id="asideLatestPosts"]'),D=$('[data-htsa-id="asideTrendingTopics"]'),H=$('[data-htsa-id="postsWidget"]');jQuery((function(n){_.length&&_.prepend(e(v)),P.length&&P.prepend(t(v)),k.length&&k.prepend(a(v)),O.length&&O.prepend(r(v)),C.length&&C.prepend(l(b)),M.length&&M.prepend(i(g)),j.length&&j.prepend(o(y)),E.length&&E.prepend(s(y)),L.length&&L.prepend(u(x)),A.length&&A.prepend(c(y)),S.length&&S.prepend(m(y)),D.length&&D.prepend(f(q)),N.length&&(N.prepend(d(w)),N.prepend(p(w))),H.length&&H.prepend(h(y))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,